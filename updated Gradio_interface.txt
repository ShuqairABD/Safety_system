##################### new test Claude Pro Gradio_interface üëáüèª for interactive ID üëçüëçüëç

import cv2
import gradio as gr
import threading
import time
import numpy as np
import logging
import sqlite3
import pandas as pd
from datetime import datetime
import pytz
import os

logging.basicConfig(level=logging.INFO)

class GradioInterface:

    def __init__(self, video_processor):
        self.video_processor = video_processor
        self.stream_ids = set()
        self.active_stream_id = None
        self.stream_names = {}
        self.stream_urls = {
            "Camera 1": "rtsp://195.34.243.52:8554/00005",
            "Camera 2": "rtsp://195.34.243.52:8554/00006",
            "Camera 3": "rtsp://195.34.243.52:8554/00007",
            "Camera 4": "rtsp://195.34.243.52:8554/00008",
            "Camera 5": "rtsp://195.34.243.52:8554/VID_20250221_105711",
            "Camera 6": "rtsp://195.34.243.52:8554/VID_20250225_135951",
            "Camera 7": "rtsp://195.34.243.52:8554/VID_20250225_140248",
            "Camera 8": "rtsp://195.34.243.52:8554/VID_20250228_134933",
            "Camera 9": "rtsp://195.34.243.52:8554/VID_20250228_135354"
        }
        self.preset_streams = list(self.stream_urls.values())
        self.stream_names = {i+1: name for i, name in enumerate(self.stream_urls.keys())}
        self.DB_PATH = "violations.db"

    def add_stream(self, rtsp_url):
        if not rtsp_url:
            return "‚ùå –û—à–∏–±–∫–∞: URL –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º."
        
        # Check if URL already exists (only if video_processor has the method)
        if hasattr(self.video_processor, 'get_active_streams'):
            active_streams = self.video_processor.get_active_streams()
            if active_streams and rtsp_url in active_streams.values():
                return "‚ùå –û—à–∏–±–∫–∞: —ç—Ç–æ—Ç –ø–æ—Ç–æ–∫ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω"
        
        # Generate new stream ID
        stream_id = max(self.stream_ids) + 1 if self.stream_ids else 1
        
        original_name = next((name for name, url in self.stream_urls.items() if url == rtsp_url), None)
        self.stream_ids.add(stream_id)
        self.stream_names[stream_id] = original_name if original_name else f"Camera {stream_id}"
        
        if self.active_stream_id is None:
            self.active_stream_id = stream_id
            
        thread = threading.Thread(target=self.video_processor.process_stream, args=(rtsp_url, stream_id))
        thread.daemon = True
        thread.start()
        
        return f"‚úÖ –ü–æ—Ç–æ–∫ {self.stream_names[stream_id]} –∑–∞–ø—É—â–µ–Ω: {rtsp_url}"

    def remove_stream(self, stream_name_to_remove):
        if not stream_name_to_remove or stream_name_to_remove == "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–µ—Ä":
            return "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –∫–∞–º–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"
        
        stream_id_to_remove = next((id for id, name in self.stream_names.items() if name == stream_name_to_remove), None)
        
        if stream_id_to_remove is None:
            return f"‚ùå –û—à–∏–±–∫–∞: –∫–∞–º–µ—Ä–∞ {stream_name_to_remove} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        
        try:
            if hasattr(self.video_processor, 'stop_single_stream'):
                self.video_processor.stop_single_stream(stream_id_to_remove)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–æ—Ç–æ–∫–∞: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–æ—Ç–æ–∫–∞: {e}"
        
        self.stream_ids.discard(stream_id_to_remove)
        self.stream_names.pop(stream_id_to_remove, None)
        
        if self.active_stream_id == stream_id_to_remove:
            self.active_stream_id = next(iter(self.stream_ids)) if self.stream_ids else None
        
        return f"‚úÖ –ö–∞–º–µ—Ä–∞ {stream_name_to_remove} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞"

    def display_active_stream(self):
        """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –≤ Gradio"""
        while True:
            if self.active_stream_id is not None:
                try:
                    frame = self.video_processor.get_processed_frame(self.active_stream_id)
                    if frame is not None:
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º BGR –≤ RGB –¥–ª—è Gradio
                        rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                        yield rgb_frame
                    else:
                        # –ü—É—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –∫–∞–¥—Ä –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω
                        yield np.zeros((480, 640, 3), dtype=np.uint8)
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞–¥—Ä–∞: {e}")
                    yield np.zeros((480, 640, 3), dtype=np.uint8)
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
                yield np.zeros((480, 640, 3), dtype=np.uint8)
            # –£–º–µ–Ω—å—à–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –±–æ–ª–µ–µ –ø–ª–∞–≤–Ω–æ–≥–æ –≤–∏–¥–µ–æ
            time.sleep(0.03)  # ~30 FPS

    def set_active_stream(self, stream_name_str):
        if not stream_name_str or stream_name_str == "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–µ—Ä":
            return "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω —Å—Ç—Ä–∏–º –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è"
            
        stream_id = next((id for id, name in self.stream_names.items() if name == stream_name_str), None)
        
        if stream_id is None or stream_id not in self.stream_ids:
            return f"‚ùå –û—à–∏–±–∫–∞: —Å—Ç—Ä–∏–º {stream_name_str} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            
        self.active_stream_id = stream_id
        return f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π —Å—Ç—Ä–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {self.stream_names[stream_id]}"

    def get_stream_choices(self):
        return [self.stream_names[id] for id in sorted(self.stream_ids)] if self.stream_ids else ["–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–µ—Ä"]

    def select_preset_stream(self, preset_selection):
        return preset_selection if preset_selection else ""

    def get_violation_data_for_display(self):
        try:
            # Initialize empty dataframe for return
            empty_df = pd.DataFrame(columns=["ID", "–¢–∏–ø –Ω–∞—Ä—É—à–µ–Ω–∏—è", "–í—Ä–µ–º—è"])
            
            # Create database if not exists
            if not os.path.exists(self.DB_PATH):
                return [], empty_df
            
            conn = sqlite3.connect(self.DB_PATH)
            query = "SELECT track_id, violation_type, timestamp FROM violations ORDER BY timestamp DESC"
            data = pd.read_sql_query(query, conn)
            conn.close()

            if data.empty:
                return [], empty_df

            violation_images = []
            base_path = os.path.abspath("violation_frame")
            
            if not os.path.exists(base_path):
                return [], data
                
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ violation_frame
            all_files = os.listdir(base_path)
            
            # –ë—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä—è–º–æ–π –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ —Å —à–∞–±–ª–æ–Ω–æ–º stream_id_violation_track_id.jpg
            # –≠—Ç–æ —Ñ–æ—Ä–º–∞—Ç, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –º–µ—Ç–æ–¥–µ _save_violations_from_queue
            for filename in all_files:
                if "violation_" in filename:  # —ç—Ç–æ —Ñ–æ—Ä–º–∞—Ç –∏–∑ –º–µ—Ç–æ–¥–∞ _save_violations_from_queue
                    image_path = os.path.join(base_path, filename)
                    try:
                        image = cv2.imread(image_path)
                        if image is not None:
                            image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
                            violation_images.append(image_rgb)
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_path}: {e}")

            return violation_images, data
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö: {e}")
            return [], empty_df

    def create_interface(self):
        with gr.Blocks() as demo:
            
            gr.Markdown('# üé• –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ RTSP-–ø–æ—Ç–æ–∫–æ–≤')
            with gr.Tabs():
                # –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
                with gr.Tab("üì∫ –ì–ª–∞–≤–Ω–∞—è"):
                    with gr.Row():
                        with gr.Column(scale=2):
                            video_output = gr.Image(label="üé• –í–∏–¥–µ–æ–ø–æ—Ç–æ–∫", height=450)
                            # with gr.Row():
                            #     process_button = gr.Button("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É")
                            #     stop_button = gr.Button("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É")
                        with gr.Column(scale=1):
                            stream_selector = gr.Dropdown(
                                label="üì∑ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–º–µ—Ä—É",
                                choices=self.get_stream_choices(),
                                value=self.get_stream_choices()[0] if self.get_stream_choices() else None)
                            
                            set_active_stream_button = gr.Button("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∫–∞–º–µ—Ä—É")
                            active_stream_info = gr.Textbox(label="‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å", interactive=False)
                            gr.Markdown("### üéÆ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π")
                            process_button = gr.Button("‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É")
                            stop_button = gr.Button("üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É")
                                
    
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–∞–º–µ—Ä
                with gr.Tab("‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–º–µ—Ä"):
                    with gr.Column():
                        gr.Markdown("### üìã –í—ã–±–æ—Ä –≥–æ—Ç–æ–≤–æ–π –∫–∞–º–µ—Ä—ã")
                        preset_dropdown = gr.Dropdown(
                            choices=self.preset_streams,
                            label="üìπ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–∞–º–µ—Ä—É"
                        )
                        gr.Markdown("### üåê –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞–º–µ—Ä—ã")
                        rtsp_url_input = gr.Textbox(label="üîó RTSP URL", placeholder="rtsp://...")
                        add_stream_button = gr.Button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–º–µ—Ä—É")
                        add_stream_status = gr.Textbox(label="üìù –°—Ç–∞—Ç—É—Å", interactive=False)
                
                
                
                # –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–º–µ—Ä
                with gr.Tab("‚ûñ –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–º–µ—Ä"):
                    with gr.Column():
                        gr.Markdown("### üìã –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–µ—Ä")
                        remove_selector = gr.Dropdown(
                            label="üì∑ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–º–µ—Ä—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
                            choices=self.get_stream_choices(),
                            value=self.get_stream_choices()[0] if self.get_stream_choices() else None
                        )
                        remove_button = gr.Button("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–∞–º–µ—Ä—É", variant="stop")
                        remove_status = gr.Textbox(label="üìù –°—Ç–∞—Ç—É—Å", interactive=False)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –≤–∫–ª–∞–¥–∫—É –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π Telegram
                with gr.Tab("üë• –ü–æ–ª—É—á–∞—Ç–µ–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"):
                    with gr.Column():
                        gr.Markdown("### üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π Telegram")
                        
                        # –í—ã–≤–æ–¥ —Ç–µ–∫—É—â–∏—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
                        recipients_output = gr.Textbox(
                            label="üìã –¢–µ–∫—É—â–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–∏",
                            value=lambda: ", ".join(self.video_processor.get_telegram_recipients()),
                            interactive=False
                        )
                        
                        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
                        with gr.Row():
                            new_recipient_input = gr.Textbox(
                                label="üÜî ID —á–∞—Ç–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è", 
                                placeholder="–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID —á–∞—Ç–∞...",
                                info="ID –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ –±–æ—Ç–∞ @userinfobot"
                            )
                            add_recipient_button = gr.Button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è")
                        
                        # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
                        with gr.Row():
                            remove_recipient_input = gr.Dropdown(
                                label="üóëÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
                                choices=self.video_processor.get_telegram_recipients(),  # –ë–µ–∑ lambda
                                interactive=True
                            )
                            remove_recipient_button = gr.Button("‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è", variant="stop")
                        
                        recipient_status = gr.Textbox(label="üìù –°—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏", interactive=False)
                    
                
                
                
                
                # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏
                with gr.Tab("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏"):
                    output_text = gr.Textbox(label="üìù –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", lines=5)
                    with gr.Row():
                        excel_output = gr.File(label="üìä –°–∫–∞—á–∞—Ç—å Excel —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏")
                        photos_output = gr.File(label="üì∏ –°–∫–∞—á–∞—Ç—å ZIP –∞—Ä—Ö–∏–≤ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏")
                
                # –ù–∞—Ä—É—à–µ–Ω–∏—è
                with gr.Tab("üö® –ù–∞—Ä—É—à–µ–Ω–∏—è"):
                    violation_table = gr.Dataframe(
                        headers=["ID", "–¢–∏–ø –Ω–∞—Ä—É—à–µ–Ω–∏—è", "–í—Ä–µ–º—è"],
                        datatype=["str", "str", "str"],
                        interactive=False,
                        label="üìã –°–ø–∏—Å–æ–∫ –Ω–∞—Ä—É—à–µ–Ω–∏–π",
                        value=pd.DataFrame(columns=["ID", "–¢–∏–ø –Ω–∞—Ä—É—à–µ–Ω–∏—è", "–í—Ä–µ–º—è"])
                    )
                    violation_gallery = gr.Gallery(
                        label="üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π",
                        columns=3,
                        height="auto"
                    )
                
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã
                with gr.Tab("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"):
                    with gr.Tabs():
                        with gr.Tab("üëì –ù–∞—Å—Ç—Ä–æ–π–∫–∏ YOLO"):
                            conf_slider = gr.Slider(minimum=0.0, maximum=1.0, step=0.01, value=0.6, label="–ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏")
                            iou_slider = gr.Slider(minimum=0.0, maximum=1.0, step=0.01, value=0.7, label="–ü–æ—Ä–æ–≥ IoU")
                            max_det = gr.Slider(minimum=1, maximum=100, step=1, value=5, label="–ú–∞–∫—Å–∏–º—É–º –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–π –Ω–∞ –∫–∞–¥—Ä")
                        
                        with gr.Tab("üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ DeepSORT"):
                            max_age_minutes_slider = gr.Slider(minimum=1, maximum=10, step=1, value=1, label="‚è≥ –ú–∞–∫—Å. –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ç—Ä–µ–∫–∞ (–º–∏–Ω)")
                            nms_max_overlap_slider = gr.Slider(minimum=0.0, maximum=1.0, step=0.01, value=0.2, label="üìä NMS Max Overlap")
                            max_cosine_distance_slider = gr.Slider(minimum=0.0, maximum=1.0, step=0.01, value=0.2, label="üìê Max Cosine Distance")
                            nn_budget_slider = gr.Slider(minimum=10, maximum=1000, step=10, value=10, label="üíæ NN Budget")
                        
                        with gr.Tab("üîç –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"):
                            max_distance_slider = gr.Slider(minimum=1, maximum=100, step=1, value=30, label="–ú–∞–∫—Å. —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–ø–∏–∫—Å–µ–ª–∏)")
                            max_size_change_slider = gr.Slider(minimum=1, maximum=100, step=1, value=30, label="–ú–∞–∫—Å. –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞")
                        
                        with gr.Tab("‚è© –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–¥—Ä–æ–≤"):
                            frame_skip_slider = gr.Slider(minimum=0.1, maximum=3.0, step=0.1, value=0.7, label="–ü—Ä–æ–ø—É—Å–∫ –∫–∞–¥—Ä–æ–≤/s")
                        
                        with gr.Tab("üëÅÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"):
                            show_track_ids = gr.Checkbox(label="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å ID —Ç—Ä–µ–∫–æ–≤", value=True)
                            show_confidence = gr.Checkbox(label="–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏", value=True)

            # –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
            def update_recipients_ui():
                recipients = self.video_processor.get_telegram_recipients()
                return [
                    ", ".join(recipients),  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º
                    gr.update(choices=recipients)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞, –∞ –Ω–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ
                ]
                        
            add_recipient_button.click(
                fn=self.video_processor.add_telegram_recipient,
                inputs=[new_recipient_input],
                outputs=[recipient_status]
            ).then(
                fn=update_recipients_ui,
                outputs=[recipients_output, remove_recipient_input]
            )
            
            remove_recipient_button.click(
                fn=self.video_processor.remove_telegram_recipient,
                inputs=[remove_recipient_input],
                outputs=[recipient_status]
            ).then(
                fn=update_recipients_ui,
                outputs=[recipients_output, remove_recipient_input]
            )
                
            
            
            
            def update_ui():
                choices = self.get_stream_choices()
                current_value = choices[0] if choices else None
                return [
                    gr.Dropdown(choices=choices, value=current_value),  # stream_selector
                    gr.Dropdown(choices=choices, value=current_value),  # remove_selector
                    current_value if current_value else "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–µ—Ä"  # active_stream_info
                ]

            # Event handlers
            preset_dropdown.change(
                fn=self.select_preset_stream,
                inputs=[preset_dropdown],
                outputs=[rtsp_url_input]
            )

            add_stream_button.click(
                self.add_stream,
                inputs=[rtsp_url_input],
                outputs=[add_stream_status]
            ).then(
                update_ui,
                outputs=[stream_selector, remove_selector, active_stream_info]
            )

            remove_button.click(
                self.remove_stream,
                inputs=[remove_selector],
                outputs=[remove_status]
            ).then(
                update_ui,
                outputs=[stream_selector, remove_selector, active_stream_info]
            )

            set_active_stream_button.click(
                self.set_active_stream,
                inputs=[stream_selector],
                outputs=[active_stream_info]
            )

            process_button.click(
                self.video_processor.process_video,
                inputs=[
                    conf_slider,
                    iou_slider,
                    max_age_minutes_slider,
                    nms_max_overlap_slider,
                    max_cosine_distance_slider,
                    nn_budget_slider,
                    frame_skip_slider,
                    max_det,
                    show_track_ids,
                    show_confidence,
                    max_distance_slider,
                    max_size_change_slider
                ],
                outputs=[output_text, excel_output, photos_output]
            )

            stop_button.click(
                fn=self.video_processor.stop_processing,
                inputs=[],
                outputs=[output_text, violation_gallery, violation_table]
            )

            demo.load(
                update_ui,
                outputs=[stream_selector, remove_selector, active_stream_info]
            )
            demo.load(
                self.display_active_stream,
                outputs=[video_output]
            )
            demo.load(
                lambda: self.get_violation_data_for_display(),
                outputs=[violation_gallery, violation_table]
            )
        demo.launch(auth=("admin", "123"))
        return demo