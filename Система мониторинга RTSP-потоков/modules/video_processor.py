import logging
import threading
import cv2
import os
import queue
import sqlite3
import shutil
import pandas as pd
import numpy as np
import asyncio
from datetime import datetime
import pytz
import time
from telegram import Bot
from ultralytics import YOLO
import zipfile
from io import BytesIO
import pandas as pd
from openpyxl import Workbook




logging.basicConfig(level=logging.INFO)

class HelperFunctions:
    @staticmethod
    def non_max_suppression(boxes, scores, threshold=0.7):
        if len(boxes) == 0:
            return []
        
        x1 = np.array([box[0] for box in boxes])
        y1 = np.array([box[1] for box in boxes])
        x2 = np.array([box[2] for box in boxes])
        y2 = np.array([box[3] for box in boxes])
        
        area = (x2 - x1) * (y2 - y1)
        indices = np.argsort(scores)[::-1]
        
        keep = []
        while indices.size > 0:
            i = indices[0]
            keep.append(i)
            
            xx1 = np.maximum(x1[i], x1[indices[1:]])
            yy1 = np.maximum(y1[i], y1[indices[1:]])
            xx2 = np.minimum(x2[i], x2[indices[1:]])
            yy2 = np.minimum(y2[i], y2[indices[1:]])
            
            w = np.maximum(0, xx2 - xx1)
            h = np.maximum(0, yy2 - yy1)
            inter = w * h
            
            iou = inter / (area[i] + area[indices[1:]] - inter)
            
            inds = np.where(iou <= threshold)[0]
            indices = indices[inds + 1]
            
        return keep

class DeepSort:
    def __init__(self, max_age=10, nms_max_overlap=0.1, max_cosine_distance=0.2, nn_budget=20):
        self.max_age = max_age
        self.nms_max_overlap = nms_max_overlap
        self.max_cosine_distance = max_cosine_distance
        self.nn_budget = nn_budget
        self.tracks = []
        self.next_id = 1
        
    def update_tracks(self, detections, frame=None):
        if frame is None:
            return []  # –ò–ª–∏ self.tracks# –ü—Ä–æ—Å—Ç–∞—è –∏–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü–∏—è –±–µ–∑ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ DeepSORT
        updated_tracks = []
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç—Ä–µ–∫–æ–≤
        for track in self.tracks:
            track.age += 1
            if track.age > self.max_age:
                continue  # –ü—Ä–æ–ø—É—Å–∫ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–µ —Ç—Ä–µ–∫–∏
            updated_tracks.append(track)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç—Ä–µ–∫–æ–≤ –∏–∑ –¥–µ—Ç–µ–∫—Ü–∏–π
        for bbox, confidence, class_name in detections:
            new_track = Track(self.next_id, bbox, confidence, class_name)
            updated_tracks.append(new_track)
            self.next_id += 1
        
        self.tracks = updated_tracks
        return self.tracks

class Track:
    def __init__(self, track_id, bbox, confidence, class_name):
        self.track_id = track_id
        self.bbox = bbox  # [x, y, width, height]
        self.age = 0
        self.confidence = confidence
        self.det_class = class_name
        
    def is_confirmed(self):
        return True  #  –≤—Å–µ —Ç—Ä–µ–∫–∏ —Å—á–∏—Ç–∞—é—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–º–∏
        
    def to_ltrb(self):
        x, y, w, h = self.bbox
        return [x, y, x + w, y + h]
        
    def get_det_conf(self):
        return self.confidence

class VideoProcessor:
    def __init__(self, DB_PATH):
        self.DB_PATH = DB_PATH
        self.stop_flag = False
        self.streams = {}
        self.lock = threading.Lock()
        self.saved_track_ids = set()
        self.save_lock = threading.Lock()
        self.violation_queue = queue.Queue()  # –û—á–µ—Ä–µ–¥—å –¥–ª—è –Ω–∞—Ä—É—à–µ–Ω–∏–π
        self.sent_violations = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π
        self.VIOLATION_COOLDOWN = 180 
        
        self.active_streams = {}  # To track active streams
        
        # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        self.save_thread = threading.Thread(target=self._save_violations_from_queue)
        self.save_thread.daemon = True
        self.save_thread.start()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Ç–æ–∫–∞ –¥–ª—è Telegram
        self.telegram_queue = queue.Queue()
        self.telegram_thread = threading.Thread(target=self._process_telegram_queue)
        self.telegram_thread.daemon = True
        self.telegram_thread.start()

    def process_stream(self, rtsp_url, stream_id):
        self.active_streams[stream_id] = {
            'running': True,
            'thread': threading.current_thread(),
            'url': rtsp_url
        }
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫–∞
        cap = cv2.VideoCapture(rtsp_url)
        while not self.stop_flag:
            ret, frame = cap.read()
            if not ret:
                logging.warning(f"–ü–æ—Ç–æ–∫ {stream_id}: –∫–∞–¥—Ä –Ω–µ –ø–æ–ª—É—á–µ–Ω.")
                break

            with self.lock:
                # –í–∞–∂–Ω–æ! –î–æ–±–∞–≤–∏—Ç—å –∫–∞–¥—Ä –≤ streams, –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—è –≤–µ—Å—å —Å–ª–æ–≤–∞—Ä—å
                self.streams[stream_id] = frame.copy()

        cap.release()
        logging.info(f"–ü–æ—Ç–æ–∫ {stream_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

    def get_processed_frame(self, stream_id):
        with self.lock:
            return self.streams.get(stream_id, None)

    
    def _save_violations_from_queue(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–∞–¥—Ä—ã –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ."""
        while not self.stop_flag or not self.violation_queue.empty():
            try:
                stream_id, track_id, frame, violation_type, local_time = self.violation_queue.get(timeout=1)

                with self.save_lock:
                    violation_frame_path = os.path.join("violation_frame", f"{stream_id}_violation_{track_id}.jpg")
                    success = cv2.imwrite(violation_frame_path, frame)

                    if success:
                        logging.info(f"–°–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–¥—Ä –∏–∑ –æ—á–µ—Ä–µ–¥–∏: {violation_frame_path}")
                    else:
                        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞–¥—Ä–∞: {violation_frame_path}")

                    conn = sqlite3.connect(self.DB_PATH)
                    cursor = conn.cursor()
                    cursor.execute(
                        "INSERT INTO violations (track_id, violation_type, timestamp) VALUES (?, ?, ?)",
                        (track_id, violation_type, local_time),
                    )
                    conn.commit()
                    conn.close()

                self.violation_queue.task_done()

            except queue.Empty:
                continue

            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏: {e}")



    def _save_violation_frame(self, stream_id, track_id, processed_frame):  # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è processed_frame!
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–∞–¥—Ä —Å bbox'–∞–º–∏"""
        try:
            os.makedirs("violation_frame", exist_ok=True)
            img_path = os.path.join("violation_frame", f"{track_id}_violation.jpg")
            
            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ö–ê–ö –ï–°–¢–¨ (—Å —Ä–∞–º–∫–∞–º–∏)
            cv2.imwrite(img_path, processed_frame)  # –ù–µ RGB!
            
            logging.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–∞—Ä—É—à–µ–Ω–∏–µ —Å bbox: {img_path}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")
            
        

    
    def _process_telegram_queue(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–∞—Ä—É—à–µ–Ω–∏–π –≤ Telegram –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        bot = None
        CHAT_ID = "6381386509"
        
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        sent_messages = set()
        
        while not self.stop_flag or not self.telegram_queue.empty():
            try:
                stream_id, frame, violation_type, local_time = self.telegram_queue.get(timeout=1)
                
                # –°–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞—Ä—É—à–µ–Ω–∏—è
                message_key = f"{stream_id}_{violation_type}_{local_time}"
                
                # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if message_key in sent_messages:
                    self.telegram_queue.task_done()
                    continue
                    
                # –î–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö
                sent_messages.add(message_key)
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
                if bot is None:
                    loop = asyncio.new_event_loop()
                    asyncio.set_event_loop(loop)
                    bot = Bot(token="7815016234:AAHco5bJKlvB0qJMyF-d6m0oCIv-msVN7bs")
                
                # –°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ –∏ –∫–∞–º–µ—Ä–µ
                async def send_violation():
                    message = f"‚ö†Ô∏è –ù–∞—Ä—É—à–µ–Ω–∏–µ: {violation_type}\n"
                    message += f"üì∑ –ö–∞–º–µ—Ä–∞: {stream_id}\n"
                    message += f"üïí –í—Ä–µ–º—è: {local_time}"
                    
                    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    temp_file = f"temp_{stream_id}_{int(time.time())}.jpg"
                    cv2.imwrite(temp_file, frame)
                    
                    with open(temp_file, "rb") as photo:
                        await bot.send_photo(chat_id=CHAT_ID, photo=photo, caption=message)
                    
                    # –£–¥–∞–ª—è—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    os.remove(temp_file)
                    
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                loop.run_until_complete(send_violation())
                
                self.telegram_queue.task_done()
            except queue.Empty:
                continue
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: {e}")
        
    def get_active_streams(self):
        return {stream_id: data['url'] for stream_id, data in self.active_streams.items()}
    
    def stop_single_stream(self, stream_id):
        if stream_id in self.active_streams:
            self.active_streams[stream_id]['running'] = False
            time.sleep(0.5)  # Give thread time to stop
            if stream_id in self.active_streams:
                del self.active_streams[stream_id]
    
    def get_processed_frame(self, stream_id):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∫–∞–¥—Ä –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞"""
        with self.lock:
            return self.streams.get(stream_id, None)

    def stop_processing(self):
        """–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—á–∞—è –≤–µ—Ä—Å–∏—è"""
        
        self.stop_flag = True  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤

        try:
            # --- 1. –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î ---
            conn = sqlite3.connect(self.DB_PATH)
            cursor = conn.cursor()
            
            # –ß–∏—Ç–∞—Ç—å –Ω–∞—Ä—É—à–µ–Ω–∏—è
            cursor.execute("SELECT track_id, violation_type, timestamp FROM violations ORDER BY timestamp DESC")
            violations = cursor.fetchall()
            
            # –°–æ–∑–¥–∞—Ç—å DataFrame
            violation_table = pd.DataFrame(violations, columns=["ID", "–¢–∏–ø –Ω–∞—Ä—É—à–µ–Ω–∏—è", "–í—Ä–µ–º—è"])
            
            # --- 2. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ Excel ---
            excel_path = "violations_report.xlsx"
            wb = Workbook()
            ws = wb.active
            ws.title = "Violations"
            ws.append(["ID", "–¢–∏–ø –Ω–∞—Ä—É—à–µ–Ω–∏—è", "–í—Ä–µ–º—è"])
            
            for _, row in violation_table.iterrows():
                ws.append([str(row['ID']), str(row['–¢–∏–ø –Ω–∞—Ä—É—à–µ–Ω–∏—è']), str(row['–í—Ä–µ–º—è'])])
            
            wb.save(excel_path)

            # --- 3. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–æ—Ç–æ —Å bboxes ---
            violation_images = []
            
            #  –∫–∞–¥—Ä—ã –Ω–∞–ø—Ä—è–º—É—é –∏–∑ streams (–≥–¥–µ –æ–Ω–∏ —Å bboxes)
            with self.lock:  # –í–∞–∂–Ω–æ –¥–ª—è –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!
                for stream_id, frame in self.streams.items():
                    if frame is not None:
                        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–∞–¥—Ä —Å bboxes
                        img_path = os.path.join("violation_frame", f"{stream_id}_violation.jpg")
                        cv2.imwrite(img_path, frame)
                        
                        #  –¥–ª—è Gradio (BGR ---> RGB)
                        img_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                        violation_images.append(img_rgb)
            
            # --- 4.  —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ---
            status_msg = (
                f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
                f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ unique_violations.xlsx\n"
                f"‚úÖ –ü–∞–ø–∫–∞ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –≤ violation_frames.zip\n"
            )

            # --- 5. –í–∏–∑—É–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ –æ—Ç–ª–∞–¥–∫–∏) ---
            if violation_images:
                debug_img = cv2.cvtColor(violation_images[-1], cv2.COLOR_RGB2BGR)
                cv2.imshow("DEBUG - –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–∞–¥—Ä", debug_img)
                cv2.waitKey(2000)  # –ü–æ–∫–∞–∑ 2 —Å–µ–∫—É–Ω–¥—ã
                cv2.destroyAllWindows()
                print(f"–û—Ç–ª–∞–¥–∫–∞: —Ä–∞–∑–º–µ—Ä {debug_img.shape}, bboxes –≤–∏–¥–Ω—ã: {'–∫—Ä–∞—Å–Ω—ã–µ' in str(debug_img)}")

            # --- 6. –í–æ–∑–≤—Ä–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ---
            return status_msg, violation_images, violation_table

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ stop_processing: {str(e)}")
            return (
                f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}",
                [],
                pd.DataFrame(columns=["ID", "–¢–∏–ø –Ω–∞—Ä—É—à–µ–Ω–∏—è", "–í—Ä–µ–º—è"])
            )

        finally:
            if 'conn' in locals():
                conn.close()
    
   
    def get_violations_from_zip(self):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö –∏–∑ –∞—Ä—Ö–∏–≤–∞"""
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        violation_images = []
        violation_info_list = []
        empty_df = pd.DataFrame(columns=["ID", "–¢–∏–ø –Ω–∞—Ä—É—à–µ–Ω–∏—è", "–í—Ä–µ–º—è"])

        try:
            # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —á—Ç–µ–Ω–∏–µ Excel
            if not os.path.exists("unique_violations.xlsx"):
                logging.error("Excel —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return empty_df, [], "‚ùå –§–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω"

            try:
                excel_data = pd.read_excel("unique_violations.xlsx")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Excel: {str(e)}")
                return empty_df, [], f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}"

            if excel_data.empty:
                return empty_df, [], "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö"

            # 2. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–∞–±–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            try:
                table_data = excel_data[['track_id', 'violation_type', 'timestamp']].copy()
                table_data.columns = ["ID", "–¢–∏–ø –Ω–∞—Ä—É—à–µ–Ω–∏—è", "–í—Ä–µ–º—è"]
            except KeyError as e:
                logging.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {str(e)}")
                return empty_df, [], f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: {str(e)}"

            # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —á—Ç–µ–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞
            if not os.path.exists("violation_frames.zip"):
                logging.warning("–ê—Ä—Ö–∏–≤ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return table_data, [], "‚ö†Ô∏è –ê—Ä—Ö–∏–≤ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω"

            try:
                with zipfile.ZipFile("violation_frames.zip", 'r') as zip_ref:
                    # –ü–æ–ª—É—á–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –∞—Ä—Ö–∏–≤–µ
                    zip_files = zip_ref.namelist()
                    
                    for _, row in excel_data.iterrows():
                        track_id = row['track_id']
                        img_name = f"{track_id}_violation.jpg"
                        
                        if img_name in zip_files:
                            try:
                                with zip_ref.open(img_name) as img_file:
                                    img_data = img_file.read()
                                    nparr = np.frombuffer(img_data, np.uint8)
                                    img = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
                                    
                                    if img is not None:
                                        img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
                                        violation_images.append(img_rgb)
                                        violation_info_list.append(
                                            f"ID: {track_id}, –¢–∏–ø: {row['violation_type']}, "
                                            f"–í—Ä–µ–º—è: {row['timestamp']}"
                                        )
                                    else:
                                        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å: {img_name}")
                            except Exception as e:
                                logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {img_name}: {str(e)}")
                        else:
                            logging.warning(f"–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∞—Ä—Ö–∏–≤–µ: {img_name}")

            except zipfile.BadZipFile:
                logging.error("–ê—Ä—Ö–∏–≤ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è ZIP-—Ñ–∞–π–ª–æ–º")
                return table_data, [], "‚ùå –û—à–∏–±–∫–∞: –∞—Ä—Ö–∏–≤ –ø–æ–≤—Ä–µ–∂–¥—ë–Ω"
            
            # 4. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            violation_info = "\n".join(violation_info_list) if violation_info_list else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
            return table_data, violation_images, violation_info

        except Exception as e:
            logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
            return empty_df, [], f"‚ùå –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
        

    def get_violation_data_for_display(self):
        try:
            conn = sqlite3.connect(self.DB_PATH)
            query = """
            SELECT track_id, violation_type, timestamp
            FROM violations
            ORDER BY timestamp DESC
            """
            data = pd.read_sql_query(query, conn)
            conn.close()

            if data.empty:
                return [], "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö."

            violation_images = []
            violation_info_list = []
            base_path = os.path.abspath("violation_frame")  # –ü–æ–ª–Ω—ã–π –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å

            for _, row in data.iterrows():
                track_id = row['track_id']
                violation_type = row['violation_type']
                timestamp = row['timestamp']
                image_path = os.path.join(base_path, f"{track_id}_violation.jpg")

                if os.path.exists(image_path):
                    try:
                        image = cv2.imread(image_path)
                        if image is not None:
                            image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ RGB
                            violation_images.append(image_rgb)
                            violation_info_list.append(
                                f"**ID:** {track_id}, **–¢–∏–ø:** {violation_type}, **–í—Ä–µ–º—è:** {timestamp}"
                            )
                        else:
                            logging.error(f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª {image_path} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º")
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {image_path}: {e}")
                else:
                    logging.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")

            violation_info = "\n\n".join(violation_info_list)
            return violation_images, violation_info

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ get_violation_data_for_display: {e}")
            return [], f"‚ùå –û—à–∏–±–∫–∞: {e}"


    def process_video(
        self,
        conf_threshold,
        iou_threshold,
        max_age_minutes=1,
        nms_max_overlap=0.2,
        max_cosine_distance=0.2,
        nn_budget=10,
        frame_skip_ratio=0.7,
        max_det=5,
        show_track_ids=True,
        show_confidence=True,
        max_distance=30,
        max_size_change=30,
    ):
        try:
            conn = sqlite3.connect(self.DB_PATH)
            cursor = conn.cursor()
            cursor.execute("DELETE FROM violations")
            conn.commit()
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞.")

            if not os.path.exists("violation_frame"):
                os.makedirs("violation_frame")
            for filename in os.listdir("violation_frame"):
                file_path = os.path.join("violation_frame", filename)
                try:
                    if os.path.isfile(file_path) or os.path.islink(file_path):
                        os.unlink(file_path)
                    elif os.path.isdir(file_path):
                        shutil.rmtree(file_path)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
            print("‚úÖ –ü–∞–ø–∫–∞ 'violation_frame' –æ—á–∏—â–µ–Ω–∞.")
            
            model = YOLO("best_yolov8s.pt")
          # model.export(format="openvino", int8=True)
          # model.export(format="onnx", half=True)
            if model is None:
                return "–û—à–∏–±–∫–∞: –º–æ–¥–µ–ª—å YOLO –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.", None, None
            
            

            fps = 30
            frame_skip = int(fps * frame_skip_ratio) if frame_skip_ratio is not None else 21  # Default to 21 if None
            
            #  —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–∞–¥—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Ç–æ–∫–∞
            frame_count = {}

            # Use default values if parameters are None
            max_age = int((max_age_minutes if max_age_minutes is not None else 1) * 60 * fps)
            nms_max_overlap = nms_max_overlap if nms_max_overlap is not None else 0.2
            max_cosine_distance = max_cosine_distance if max_cosine_distance is not None else 0.2
            nn_budget = nn_budget if nn_budget is not None else 10

            tracker = DeepSort(
                max_age=max_age,
                nms_max_overlap=nms_max_overlap,
                max_cosine_distance=max_cosine_distance,
                nn_budget=nn_budget,
            )
            class_names = {0: "Helmet", 1: "No-Helmet", 2: "No-Vest", 3: "Vest"}
            
            # –¢–∞–∫–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Ç–æ–∫–∞
            previous_tracks = {}

            while not self.stop_flag:
                frames_to_process = []
                with self.lock:
                    frames_to_process = list(self.streams.items())

                if not frames_to_process:
                    time.sleep(0.1)
                    continue

                for stream_id, frame in frames_to_process:
                    if frame is None:
                        logging.warning(f"–ö–∞–¥—Ä –¥–ª—è –ø–æ—Ç–æ–∫–∞ {stream_id} –Ω–µ –ø–æ–ª—É—á–µ–Ω")
                        continue

                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞
                    if stream_id not in frame_count:
                        frame_count[stream_id] = 0
                    
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª–æ–≤–∞—Ä—è —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞
                    if stream_id not in previous_tracks:
                        previous_tracks[stream_id] = {}

                    # –£–≤–µ–ª–∏—á–∏–≤–∞—Ç—å —Å—á–µ—Ç—á–∏–∫ –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
                    frame_count[stream_id] += 1
                    current_frame_count = frame_count[stream_id]
                    
                    print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–¥—Ä–∞ {current_frame_count} –¥–ª—è –ø–æ—Ç–æ–∫–∞ {stream_id}")
                    
                    # –ü—Ä–æ–ø—É—Å –∫–∞–¥—Ä—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π frame_skip
                    if frame_skip > 0 and current_frame_count % frame_skip != 0:
                        continue
                    
                    # Safe YOLO inference
                    try:
                        results = model(frame, conf=conf_threshold, iou=iou_threshold)[0]
                        if results is None or len(results.boxes) == 0:
                            print(f"YOLO –Ω–µ –æ–±–Ω–∞—Ä—É–∂–∏–ª –æ–±—ä–µ–∫—Ç—ã –Ω–∞ —ç—Ç–æ–º –∫–∞–¥—Ä–µ –¥–ª—è –ø–æ—Ç–æ–∫–∞ {stream_id}.")
                            continue
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ YOLO: {e}")
                        continue

                    all_boxes = []
                    all_scores = []
                    detections = []
                    has_violation = False

                    # –¥–µ—Ç–µ–∫—Ü–∏–∏ - —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –Ω–∞ None
                    for box in results.boxes:
                        try:
                            if box.xyxy is None or box.cls is None or box.conf is None:
                                continue
                                
                            x1, y1, x2, y2 = map(int, box.xyxy[0])
                            class_id = int(box.cls[0])
                            confidence = box.conf[0].item()
                            label = class_names.get(class_id, "Unknown")
                            
                            all_boxes.append([x1, y1, x2, y2])
                            all_scores.append(confidence)
                            logging.info(f"–î–µ—Ç–µ–∫—Ü–∏—è: {label} –Ω–∞ {stream_id} —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é {confidence}")
                            
                            if label in class_names.values():
                                detections.append(([x1, y1, x2 - x1, y2 - y1], confidence, label))
                            if label in ["No-Helmet", "No-Vest"]:
                                has_violation = True
                        except Exception as e:
                            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–æ–∫—Å–∞: {e}")
                            continue

                    # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π NMS —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –ø—É—Å—Ç—ã–µ —Å–ø–∏—Å–∫–∏
                    if not all_boxes or not all_scores:
                        continue
                        
                    try:
                        nms_indices = HelperFunctions.non_max_suppression(all_boxes, all_scores, threshold=iou_threshold)
                        filtered_boxes = [all_boxes[i] for i in nms_indices]
                        if max_det is not None and len(filtered_boxes) > max_det:
                            filtered_boxes = filtered_boxes[:max_det]
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –≤ NMS: {e}")
                        continue

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–¥—Ä–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    processed_frame = frame.copy()

                    # –û–±–Ω–æ–≤–ª—è—Ç—å —Ç—Ä–µ–∫–∏–Ω–≥ —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
                    try:
                        tracks = tracker.update_tracks(detections, frame=processed_frame)
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–æ–≤: {e}")
                        continue
                        
                    for track in tracks:
                        if not track.is_confirmed():
                            continue
                            
                        try:
                            track_id = track.track_id
                            x1, y1, x2, y2 = map(int, track.to_ltrb())
                            label = track.det_class if track.det_class else "Unknown"

                            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
                            if track_id in previous_tracks[stream_id]:
                                prev_x1, prev_y1, prev_x2, prev_y2 = previous_tracks[stream_id][track_id]
                                
                                # Safe distance calculation with None checks
                                if (max_distance is not None and 
                                    not (None in [x1, prev_x1, y1, prev_y1])):
                                    distance = np.sqrt((x1 - prev_x1) ** 2 + (y1 - prev_y1) ** 2)
                                    
                                    if (max_size_change is not None and 
                                        not (None in [x2, x1, prev_x2, prev_x1, y2, y1, prev_y2, prev_y1])):
                                        size_change = abs((x2 - x1) - (prev_x2 - prev_x1)) + abs((y2 - y1) - (prev_y2 - prev_y1))
                                        
                                        if distance > max_distance or size_change > max_size_change:
                                            continue
                                    else:
                                        if distance > max_distance:
                                            continue
                                            
                            previous_tracks[stream_id][track_id] = (x1, y1, x2, y2)

                            color = (0, 0, 255) if label in ["No-Helmet", "No-Vest"] else (0, 255, 0)
                            cv2.rectangle(processed_frame, (x1, y1), (x2, y2), color, 2)
                            
                            if show_track_ids:
                                cv2.putText(processed_frame, f"ID: {track_id}", (x1, y1 - 50), 
                                           cv2.FONT_HERSHEY_SIMPLEX, 0.8, color, 2)
                                           
                            if show_confidence:
                                confidence = track.get_det_conf() if track.get_det_conf() is not None else 0
                                cv2.putText(processed_frame, f"Conf: {confidence:.2f}", (x1, y1 - 70), 
                                           cv2.FONT_HERSHEY_SIMPLEX, 0.8, color, 2)
                                           
                            cv2.putText(processed_frame, label, (x1, y1 - 30), 
                                       cv2.FONT_HERSHEY_SIMPLEX, 0.8, color, 2)
                        except Exception as e:
                            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–µ–∫–∞ {track_id if 'track_id' in locals() else 'unknown'}: {e}")
                            continue

                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–¥—Ä–∞ –≤ streams –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
                    with self.lock:
                        self.streams[stream_id] = processed_frame

                    # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–∞—Ä—É—à–µ–Ω–∏–µ –∏ –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∫–∞–¥—Ä –≤ –æ—á–µ—Ä–µ–¥—å
                    if has_violation:
                        try:
                            violation_type = "No-Helmet" if "No-Helmet" in [t.det_class for t in tracks if t.det_class] else "No-Vest"
                            local_time = datetime.now(pytz.timezone("Europe/Moscow")).strftime('%Y-%m-%d %H:%M:%S')
                            
                            # –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç—Ä–µ–∫–∏ —Å –Ω–∞—Ä—É—à–µ–Ω–∏—è–º–∏
                            violation_tracks = [track for track in tracks if track.det_class in ["No-Helmet", "No-Vest"]]
                            
                            # –°–æ–∑–¥–∞—Ç—å –∫–æ–ø–∏—é –∫–∞–¥—Ä–∞ –¥–ª—è –æ—Ç–º–µ—Ç–æ–∫
                            violation_frame = frame.copy()
                            
                            # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ç–æ–ª—å–∫–æ bboxes –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π
                            for track in violation_tracks:
                                try:
                                    x1, y1, x2, y2 = map(int, track.to_ltrb())
                                    track_id = track.track_id
                                    label = track.det_class
                                    confidence = track.get_det_conf() if track.get_det_conf() is not None else 0
                                    
                                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è
                                    current_time = time.time()
                                    violation_key = (stream_id, track_id, label)
                                    
                                    if violation_key in self.sent_violations:
                                        last_sent_time = self.sent_violations[violation_key]
                                        if current_time - last_sent_time < self.VIOLATION_COOLDOWN:
                                            continue
                                    
                                    # –û–±–Ω–æ–≤–ª—è—Ç—å —Å–ª–æ–≤–∞—Ä—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π
                                    self.sent_violations[violation_key] = current_time
                                    
                                    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
                                    self.sent_violations = {
                                        k: v for k, v in self.sent_violations.items() 
                                        if current_time - v < self.VIOLATION_COOLDOWN
                                    }
                                    
                                    # bbox —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π
                                    color = (0, 0, 255)  # red
                                    cv2.rectangle(violation_frame, (x1, y1), (x2, y2), color, 2)
                                    cv2.putText(violation_frame, f"ID: {track_id}", (x1, y1 - 50), 
                                               cv2.FONT_HERSHEY_SIMPLEX, 0.8, color, 2)
                                    cv2.putText(violation_frame, f"Conf: {confidence:.2f}", (x1, y1 - 70), 
                                               cv2.FONT_HERSHEY_SIMPLEX, 0.8, color, 2)
                                    cv2.putText(violation_frame, label, (x1, y1 - 30), 
                                               cv2.FONT_HERSHEY_SIMPLEX, 0.8, color, 2)
                                    
                                    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –æ—á–µ—Ä–µ–¥–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–µ–≥–æ –Ω–∞—Ä—É—à–µ–Ω–∏—è
                                    self.violation_queue.put((stream_id, track_id, violation_frame, label, local_time))
                                    self.telegram_queue.put((stream_id, violation_frame, label, local_time))
                                    
                                except Exception as e:
                                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –¥–ª—è —Ç—Ä–µ–∫–∞ {track_id if 'track_id' in locals() else 'unknown'}: {e}")
                        except Exception as e:
                            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞—Ä—É—à–µ–Ω–∏–π: {e}")

            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –≤ Excel
            query = """
            SELECT DISTINCT track_id, violation_type, MIN(timestamp) AS first_occurrence
            FROM violations
            GROUP BY track_id, violation_type
            ORDER BY first_occurrence
            """
            data = pd.read_sql_query(query, conn)
            excel_path = "unique_violations.xlsx"
            data.to_excel(excel_path, index=False)
            logging.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {excel_path}")
            

            zip_path = "violation_frames.zip"
            shutil.make_archive("violation_frames", 'zip', "violation_frame")
            logging.info(f"‚úÖ –ü–∞–ø–∫–∞ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –≤ {zip_path}")
            print (f"‚úÖ –ü–∞–ø–∫–∞ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –≤ {zip_path}")

            conn.close()
            return "‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã–π –¥–ª—è —Å–∫–∞—á–∫–∏", excel_path, zip_path
        
        except Exception as e:
            if 'conn' in locals():
                conn.close()
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}", None, None

    def process_video(
        self,
        conf_threshold,
        iou_threshold,
        max_age_minutes=1,
        nms_max_overlap=0.2,
        max_cosine_distance=0.2,
        nn_budget=10,
        frame_skip_ratio=0.7,
        max_det=5,
        show_track_ids=True,
        show_confidence=True,
        max_distance=30,
        max_size_change=30,
    ):
        try:
            conn = sqlite3.connect(self.DB_PATH)
            cursor = conn.cursor()
            cursor.execute("DELETE FROM violations")
            conn.commit()
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞.")

            if not os.path.exists("violation_frame"):
                os.makedirs("violation_frame")
            for filename in os.listdir("violation_frame"):
                file_path = os.path.join("violation_frame", filename)
                try:
                    if os.path.isfile(file_path) or os.path.islink(file_path):
                        os.unlink(file_path)
                    elif os.path.isdir(file_path):
                        shutil.rmtree(file_path)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
            print("‚úÖ –ü–∞–ø–∫–∞ 'violation_frame' –æ—á–∏—â–µ–Ω–∞.")

            model = YOLO("best_yolov8s.pt")
            if model is None:
                return "–û—à–∏–±–∫–∞: –º–æ–¥–µ–ª—å YOLO –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.", None, None

            fps = 30
            frame_skip = int(fps * frame_skip_ratio) if frame_skip_ratio is not None else 21
            
            # –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏ –∫–∞–¥—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Ç–æ–∫–∞
            frame_counts = {}
            
            # –û—Ç–¥–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–∫–µ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Ç–æ–∫–∞
            trackers = {}
            previous_tracks = {}
            
            class_names = {0: "Helmet", 1: "No-Helmet", 2: "No-Vest", 3: "Vest"}

            while not self.stop_flag:
                frames_to_process = []
                with self.lock:
                    frames_to_process = list(self.streams.items())

                if not frames_to_process:
                    time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –Ω–∞–≥—Ä—É–∂–∞—Ç—å CPU
                    continue

                for stream_id, frame in frames_to_process:
                    if frame is None:
                        logging.warning(f"–ö–∞–¥—Ä –¥–ª—è –ø–æ—Ç–æ–∫–∞ {stream_id} –Ω–µ –ø–æ–ª—É—á–µ–Ω")
                        continue
                    
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –∫–∞–¥—Ä–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
                    if stream_id not in frame_counts:
                        frame_counts[stream_id] = 0
                        
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–∫–µ—Ä–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
                    if stream_id not in trackers:
                        trackers[stream_id] = DeepSort(
                            max_age=int(max_age_minutes * 60 * fps),
                            nms_max_overlap=nms_max_overlap,
                            max_cosine_distance=max_cosine_distance,
                            nn_budget=nn_budget,
                        )
                    
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç—Ä–µ–∫–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
                    if stream_id not in previous_tracks:
                        previous_tracks[stream_id] = {}

                    # –£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
                    frame_counts[stream_id] += 1
                    current_frame_count = frame_counts[stream_id]
                    
                    # –ü—Ä–æ–ø—É—Å –∫–∞–¥—Ä—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π frame_skip
                    if current_frame_count % frame_skip != 0:
                        continue

                    print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–¥—Ä–∞ {current_frame_count} –¥–ª—è –ø–æ—Ç–æ–∫–∞ {stream_id}")
                    
                    try:
                        results = model(frame, conf=conf_threshold, iou=iou_threshold)[0]
                        if results is None or len(results.boxes) == 0:
                            print(f"YOLO –Ω–µ –æ–±–Ω–∞—Ä—É–∂–∏–ª –æ–±—ä–µ–∫—Ç—ã –Ω–∞ —ç—Ç–æ–º –∫–∞–¥—Ä–µ –¥–ª—è –ø–æ—Ç–æ–∫–∞ {stream_id}.")
                            continue
                            
                        all_boxes = []
                        all_scores = []
                        detections = []
                        has_violation = False

                        # –¥–µ—Ç–µ–∫—Ü–∏–∏
                        for box in results.boxes:
                            try:
                                if box.xyxy is None or box.cls is None or box.conf is None:
                                    continue
                                    
                                x1, y1, x2, y2 = map(int, box.xyxy[0])
                                class_id = int(box.cls[0])
                                confidence = box.conf[0].item()
                                label = class_names.get(class_id, "Unknown")
                                
                                all_boxes.append([x1, y1, x2, y2])
                                all_scores.append(confidence)
                                logging.info(f"–î–µ—Ç–µ–∫—Ü–∏—è: {label} –Ω–∞ {stream_id} —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é {confidence}")
                                
                                if label in class_names.values():
                                    detections.append(([x1, y1, x2 - x1, y2 - y1], confidence, label))
                                if label in ["No-Helmet", "No-Vest"]:
                                    has_violation = True
                            except Exception as e:
                                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–æ–∫—Å–∞: {e}")
                                continue

                        # NMS —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –ø—É—Å—Ç—ã–µ —Å–ø–∏—Å–∫–∏
                        if not all_boxes or not all_scores:
                            continue
                            
                        try:
                            nms_indices = HelperFunctions.non_max_suppression(all_boxes, all_scores, threshold=iou_threshold)
                            filtered_boxes = [all_boxes[i] for i in nms_indices]
                            if max_det is not None and len(filtered_boxes) > max_det:
                                filtered_boxes = filtered_boxes[:max_det]
                        except Exception as e:
                            logging.error(f"–û—à–∏–±–∫–∞ –≤ NMS: {e}")
                            continue

                        # –°–æ–∑–¥–∞—Ç—å –∫–æ–ø–∏—é –∫–∞–¥—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                        processed_frame = frame.copy()

                        # –û–±–Ω–æ–≤–ª—è—Ç—å —Ç—Ä–µ–∫–∏–Ω–≥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç—Ä–µ–∫–µ—Ä–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
                        try:
                            tracks = trackers[stream_id].update_tracks(detections, frame=processed_frame)
                        except Exception as e:
                            logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –ø–æ—Ç–æ–∫–∞ {stream_id}: {e}")
                            continue

                        for track in tracks:
                            if not track.is_confirmed():
                                continue
                                
                            try:
                                track_id = track.track_id
                                x1, y1, x2, y2 = map(int, track.to_ltrb())
                                label = track.det_class if track.det_class else "Unknown"

                                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–∫–æ–≤ —Å —É—á–µ—Ç–æ–º stream_id
                                if track_id in previous_tracks[stream_id]:
                                    prev_x1, prev_y1, prev_x2, prev_y2 = previous_tracks[stream_id][track_id]
                                    
                                    if max_distance is not None:
                                        distance = np.sqrt((x1 - prev_x1) ** 2 + (y1 - prev_y1) ** 2)
                                        
                                        if max_size_change is not None:
                                            size_change = abs((x2 - x1) - (prev_x2 - prev_x1)) + abs((y2 - y1) - (prev_y2 - prev_y1))
                                            
                                            if distance > max_distance or size_change > max_size_change:
                                                continue
                                        else:
                                            if distance > max_distance:
                                                continue

                                # –û–±–Ω–æ–≤–ª—è—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ç—Ä–µ–∫–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ—Ç–æ–∫–∞
                                previous_tracks[stream_id][track_id] = (x1, y1, x2, y2)

                                color = (0, 0, 255) if label in ["No-Helmet", "No-Vest"] else (0, 255, 0)
                                cv2.rectangle(processed_frame, (x1, y1), (x2, y2), color, 2)
                                
                                if show_track_ids:
                                    cv2.putText(processed_frame, f"ID: {track_id}", (x1, y1 - 50), 
                                            cv2.FONT_HERSHEY_SIMPLEX, 0.8, color, 2)
                                            
                                if show_confidence:
                                    confidence = track.get_det_conf() if track.get_det_conf() is not None else 0
                                    cv2.putText(processed_frame, f"Conf: {confidence:.2f}", (x1, y1 - 70), 
                                            cv2.FONT_HERSHEY_SIMPLEX, 0.8, color, 2)
                                            
                                cv2.putText(processed_frame, label, (x1, y1 - 30), 
                                        cv2.FONT_HERSHEY_SIMPLEX, 0.8, color, 2)
                            except Exception as e:
                                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–µ–∫–∞ {track_id if 'track_id' in locals() else 'unknown'} –≤ –ø–æ—Ç–æ–∫–µ {stream_id}: {e}")
                                continue

                        # –û–±–Ω–æ–≤–ª—è—Ç—å –∫–∞–¥—Ä –≤ streams –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
                        with self.lock:
                            self.streams[stream_id] = processed_frame

                        # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–∞—Ä—É—à–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞–¥—Ä –≤ –æ—á–µ—Ä–µ–¥—å
                        if has_violation:
                            try:
                                violation_type = "No-Helmet" if "No-Helmet" in [t.det_class for t in tracks if t.det_class] else "No-Vest"
                                local_time = datetime.now(pytz.timezone("Europe/Moscow")).strftime('%Y-%m-%d %H:%M:%S')
                                
                                # –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞–µ–º —Ç—Ä–µ–∫–∏ —Å –Ω–∞—Ä—É—à–µ–Ω–∏—è–º–∏
                                violation_tracks = [track for track in tracks if track.det_class in ["No-Helmet", "No-Vest"]]
                                
                                # –°–æ–∑–¥–∞—Ç—å –∫–æ–ø–∏—é –∫–∞–¥—Ä–∞ –¥–ª—è –æ—Ç–º–µ—Ç–æ–∫ –Ω–∞—Ä—É—à–µ–Ω–∏–π
                                violation_frame = frame.copy()
                                
                                # –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ bboxes –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π
                                for track in violation_tracks:
                                    try:
                                        track_id = track.track_id
                                        x1, y1, x2, y2 = map(int, track.to_ltrb())
                                        label = track.det_class
                                        confidence = track.get_det_conf() if track.get_det_conf() is not None else 0
                                        
                                        # –†–∞–º–∫–∞ –∫—Ä–∞—Å–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞ –¥–ª—è –Ω–∞—Ä—É—à–∏—Ç–µ–ª–µ–π
                                        color = (0, 0, 255)  # –∫—Ä–∞—Å–Ω—ã–π
                                        cv2.rectangle(violation_frame, (x1, y1), (x2, y2), color, 2)
                                        cv2.putText(violation_frame, f"ID: {track_id}", (x1, y1 - 50), 
                                                cv2.FONT_HERSHEY_SIMPLEX, 0.8, color, 2)
                                        cv2.putText(violation_frame, f"Conf: {confidence:.2f}", (x1, y1 - 70), 
                                                cv2.FONT_HERSHEY_SIMPLEX, 0.8, color, 2)
                                        cv2.putText(violation_frame, label, (x1, y1 - 30), 
                                                cv2.FONT_HERSHEY_SIMPLEX, 0.8, color, 2)
                                        
                                        # –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞—Ä—É—à–µ–Ω–∏–µ
                                        self.violation_queue.put((stream_id, track_id, violation_frame, label, local_time))
                                    except Exception as e:
                                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –¥–ª—è —Ç—Ä–µ–∫–∞ {track_id if 'track_id' in locals() else 'unknown'}: {e}")
                            except Exception as e:
                                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞—Ä—É—à–µ–Ω–∏–π –¥–ª—è –ø–æ—Ç–æ–∫–∞ {stream_id}: {e}")
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–¥—Ä–∞ –¥–ª—è –ø–æ—Ç–æ–∫–∞ {stream_id}: {e}")
                        continue

            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –≤ Excel
            query = """
            SELECT DISTINCT track_id, violation_type, MIN(timestamp) AS first_occurrence
            FROM violations
            GROUP BY track_id, violation_type
            ORDER BY first_occurrence
            """
            data = pd.read_sql_query(query, conn)
            excel_path = "unique_violations.xlsx"
            data.to_excel(excel_path, index=False)
            logging.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {excel_path}")
            

            zip_path = "violation_frames.zip"
            shutil.make_archive("violation_frames", 'zip', "violation_frame")
            logging.info(f"‚úÖ –ü–∞–ø–∫–∞ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –≤ {zip_path}")
            print(f"‚úÖ –ü–∞–ø–∫–∞ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –≤ {zip_path}")

            conn.close()
            return "‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ –≥–æ—Ç–æ–≤—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è", excel_path, zip_path

        except Exception as e:
            if 'conn' in locals():
                conn.close()
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}", None, None